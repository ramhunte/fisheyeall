<<<<<<< HEAD
>>>>>>> main
PRODUCT = NA_real_,
SECTOR = 'Shoreside') %>%
select(-variable, -value)
fr_purc_raw_tac <- dbGetQuery(framdw, paste0("
select lbs weight, proc_ghid as GHID, year
from edc_fish_mv
where year <=", frcurrentyear, "
and quota_sp = 'Pacific whiting'
and sector = 'SHORESIDE'
and fleet <> 'TI'
and year > 2008
")) %>% distinct() %>%
filter(!is.na(GHID)) %>%
group_by(GHID, YEAR) %>%
summarize(WEIGHT = sum(WEIGHT)) %>%
reshape2::melt(id.vars = c('GHID','YEAR')) %>%
mutate(METRIC = 'Commercial catch',
VALUE = value,
PRODUCT = NA_real_,
SECTOR = 'Shoreside') %>%
select(-variable, -value)
fr_prod_raw <- dbGetQuery(framdw, paste0("select WEIGHT, value, GHID, SURVEY_YEAR year, product
from EDC_FR_PRODUCTION
where survey_year <=", frcurrentyear, "and fishery_group = 'Pacific whiting' and species_cd = 'Pacific whiting'")) %>%
reshape2::melt(id.vars = c('GHID','YEAR','PRODUCT')) %>%
mutate(SECTOR = 'Shoreside',
METRIC = case_when(variable == 'WEIGHT' ~ 'Production weight',
variable == 'VALUE' ~ 'Production value'),
VALUE = value) %>%
select(-value, -variable)
fr_prod_tot <- fr_prod_raw %>%
group_by(GHID, YEAR, SECTOR, METRIC) %>%
summarize(VALUE = sumNA(VALUE, na.rm = T),
PRODUCT = 'All products') %>%
data.frame()
# (5) Full FR data#####
fr_full <- rbind(fr_prod_raw, fr_purc_raw, fr_prod_tot, fr_purc_raw_tac) %>%
# Match with CP/MS
mutate(PRODUCT = case_when(PRODUCT == 'Frozen' ~ 'Frozen whole/Round',
T ~ PRODUCT),
COMPANY = GHID,
VESSEL_ID = GHID) %>%
select(-GHID)
# (6) TAC data####
tac <- dbGetQuery(framdw, paste0("select year, mothership, catcher_processor, shoreside, final from edc_pwht_alloc
where year between 2009 and ", currentyear,"")) %>%
reshape2::melt(id.vars = c('YEAR', 'FINAL')) %>%
mutate(Sector = case_when(variable == 'MOTHERSHIP' ~ 'Mothership',
variable == 'CATCHER_PROCESSOR' ~ 'Catcher-Processor',
variable == 'SHORESIDE' ~ 'Shoreside'),
Value = value,
Metric = case_when(FINAL == 'ORIGINAL' ~ 'Initial allocation',
FINAL == 'FINAL'  ~ 'Final allocation'),
Year = YEAR) %>%
select(-variable, -value, -YEAR, -FINAL)
tac_all <- tac %>%
group_by(Year, Metric) %>%
summarize(Value = sum(Value)) %>%
mutate(Sector = 'All') %>%
data.frame()
tac_all2 <- rbind(tac, tac_all) %>%
mutate(N = NA_real_,
Statistic = 'Total',
Value = Value*2204.62,
Variance = NA_real_,
q25 = NA_real_,
q75 = NA_real_)
# Decided to include TAC for median and mean. Label will always say 'Total'
tac_final <- tac_all2 %>%
rbind(tac_all2 %>%
mutate(Statistic = 'Median')) %>%
rbind(tac_all2 %>%
mutate(Statistic = 'Mean'))
# (7) CP/MS and FR combined and deflated ####
data_combined <- rbind(fr_full, cpms_full,
(fr_full %>%
mutate(SECTOR = 'All')),
(cpms_full %>%
mutate(SECTOR = 'All'))) %>%
merge(defl) %>%
mutate(VALUE = case_when(grepl('value', METRIC) ~ VALUE/DEFL,
T ~ VALUE)) %>%
select(-DEFL)
# (8) Pull in CP/MS impacts ######
# We are pulling the summarized final data for impacts so we don't need to do anything to it and can just bind to final whiting dataset
# set directory to pull in files from fisheyeapp
setwd('..')
setwd('..')
load("fisheyeall/PerformanceMetrics/data/CVperfmetrics.RData")
load("fisheyeall/PerformanceMetrics/data/Mperfmetrics.RData")
load("fisheyeall/PerformanceMetrics/data/CPperfmetrics.RData")
#load("PerformanceMetrics/data/FRperfmetrics.RData")
# set directory back to fisheyewhiting
setwd('fisheyeall/whiting')
ms_impacts <- filter(Mperfmetrics, tab == 'Impacts') %>%
dplyr::select(-c(inclAK,CS,CATEGORY,AGID,VARIABLE,metric_flag,conf,flag,tab,lower,upper,whitingv)) %>%
rename(Year = YEAR,
Metric = METRIC,
Statistic = STAT,
Value = VALUE,
Variance = VARIANCE) %>%
mutate(Sector = 'Mothership',
tab = 'Summary',
Order = NA_real_
)
# Pull impacts for at-sea vessels
atsea_impacts <- filter(CVperfmetrics, METRIC %in% c('Employment impacts', 'Income impacts'), CATEGORY == 'Fisheries', VARIABLE == 'At-sea Pacific whiting', whitingv == 'All vessels') %>%
dplyr::select(-c(inclAK,CS,CATEGORY,AGID,VARIABLE,metric_flag,conf,flag,lower,upper,whitingv)) %>%
rename(Year = YEAR,
Metric = METRIC,
Statistic = STAT,
Value_atsea = VALUE,
Variance = VARIANCE,
N_atsea = N) %>%
mutate(Sector = 'Mothership',
tab = 'Summary',
Order = NA_real_
)
# combine at sea vessel and mothership
mscv_impacts <- full_join(ms_impacts, atsea_impacts) %>%
mutate(Value = Value + Value_atsea,
N = N + N_atsea,
Year = as.numeric(Year)) %>%
dplyr::select(-N_atsea, -Value_atsea, -origN)
# cp impacts
cp_impacts <- filter(CPperfmetrics, tab == 'Impacts') %>%
dplyr::select(-c(inclAK,CS,CATEGORY,AGID,VARIABLE,metric_flag,conf,flag,tab,lower,upper,whitingv)) %>%
rename(Year = YEAR,
Metric = METRIC,
Statistic = STAT,
Value = VALUE,
Variance = VARIANCE) %>%
mutate(Sector = 'Catcher-Processor',
tab = 'Summary',
Order = NA_real_,
Year = as.numeric(Year)
)
##-----------------------------##
##-------Data analysis--------####
##----------------------------##
##Calculating rates####
rates_raw <- data_combined %>%
mutate(PRODUCT = case_when(METRIC %in% c('Purchase value','Purchase (or catch) weight') ~ 'All products',
T ~ PRODUCT)) %>%
reshape2::dcast(VESSEL_ID + COMPANY + YEAR + SECTOR + PRODUCT ~ METRIC, value.var = 'VALUE') %>%
mutate(`Purchase price (per lb)` = case_when(!is.na(`Purchase value`) & !is.na(`Purchase (or catch) weight`)
& PRODUCT == 'All products' ~ `Purchase value`/`Purchase (or catch) weight`,
T ~ NA_real_),
`Production price (per lb)` = case_when(!is.na(`Production value`) & !is.na(`Production weight`) ~ `Production value`/`Production weight`,
T ~ NA_real_),
Markup = case_when(PRODUCT == 'All products' & !is.na(`Purchase value`) & !is.na(`Production value`) ~ `Production value`/`Purchase value`,
T ~ NA_real_),
`Recovery rate` = case_when(PRODUCT == 'All products' & !is.na(`Purchase (or catch) weight`) & !is.na(`Production weight`) ~ `Production weight`/`Purchase (or catch) weight`,
T ~ NA_real_)) %>%
reshape2::melt(id.vars = c('VESSEL_ID','COMPANY','YEAR','SECTOR','PRODUCT')) %>%
filter(!is.na(value) & variable %in% c('Purchase price (per lb)','Production price (per lb)','Markup', 'Recovery rate')) %>%
mutate(METRIC = variable,
VALUE = value) %>%
select(-variable, -value)
# Calculating percent of total production weight/value by product type
perc <- filter(data_combined, PRODUCT == 'All products') %>%
reshape2::dcast(YEAR + SECTOR + COMPANY + VESSEL_ID ~ METRIC, value.var = 'VALUE') %>%
rename(`Total weight` = `Production weight`,
`Total value` = `Production value`) %>%
merge(data_combined %>%
filter(PRODUCT != 'All products' & !is.na(PRODUCT)) %>%
=======
>>>>>>> defl_slider
reshape2::dcast(YEAR + SECTOR + COMPANY + VESSEL_ID + PRODUCT ~ METRIC, value.var = 'VALUE')) %>%
mutate(`Percent by value` = (`Production value`/`Total value`)*100,
`Percent by weight` = (`Production weight`/`Total weight`)*100) %>%
select(-`Total value`,-`Total weight`,-`Production value`,-`Production weight`) %>%
reshape2::melt(id.vars = c('YEAR','SECTOR','COMPANY','VESSEL_ID','PRODUCT')) %>%
rename(METRIC = variable,
VALUE = value)
# add percentages
unused_tac <- filter(data_combined, METRIC %in% c('Commercial catch')) %>%
group_by(YEAR, SECTOR, METRIC, PRODUCT) %>%
summarize(Value_pw = sum(VALUE)) %>%
left_join(tac_final, by = c(c('YEAR' = 'Year'), c('SECTOR' = 'Sector'))) %>%
filter(Metric == 'Final allocation') %>%
mutate(uTAC  = Value-Value_pw,
pcw = (Value_pw/Value)*100,
puTAC = 100 - pcw) %>% ungroup() %>%
select(-Value_pw, -Value, -Metric, -PRODUCT, -METRIC) %>%
tidyr::pivot_longer(uTAC:puTAC, names_to = "METRIC", values_to = "VALUE") %>%
mutate(METRIC = case_when(METRIC == 'uTAC' ~ 'Unutilized allocation, post-reapportionment',
METRIC == 'pcw' ~ 'Percent Commercial catch',
METRIC == 'puTAC' ~ 'Percent Unutilized allocation, post-reapportionment',
T ~ METRIC)) %>%
rename(Metric = 'METRIC',
Year = 'YEAR',
Sector = 'SECTOR',
Value = 'VALUE') %>%
distinct()
# %>%
#   select(-Value_pw, -Value, -Metric, -N_total, -PRODUCT) %>%
#   rename(Metric = 'METRIC',
#          Year = 'YEAR',
#          Sector = 'SECTOR',
#          Value = 'VALUE') %>%
#   distinct()
# %>%
#   mutate(METRIC = 'Unutilized allocation, post-reapportionment',
#          VALUE = Value-Value_pw,
#          N_total = NA) %>%
#   select(-Value_pw, -Value, -Metric, -N_total, -PRODUCT) %>%
#   rename(Metric = 'METRIC',
#          Year = 'YEAR',
#          Sector = 'SECTOR',
#          Value = 'VALUE') %>%
#   distinct()
data_rates_full <- rbind(data_combined, rates_raw, perc)
# Confidentiality treatment ###########
data_rates_full_treated <- confTreat(data_rates_full, variables = c('YEAR','METRIC','PRODUCT','SECTOR'), valvar = 'VALUE',
confunit = 'COMPANY', drop = F)
# Summarizing data#####
# Mean, median, total
data_all_smry <- data_rates_full_treated %>%
group_by(YEAR, SECTOR, PRODUCT, METRIC) %>%
summarize(Mean = mean(VALUE, na.rm = T),
Median = median(VALUE, na.rm = T),
Total = sumNA(VALUE, na.rm = T),
VARIANCE = sd(VALUE, na.rm = T),
q25 = quantile(VALUE, prob =.25, type = 8, na.rm = T),
q75 = quantile(VALUE, prob =.75, type = 8, na.rm = T),
# show N for the total number (regardless of whether NA or not)
N_total = length(unique(VESSEL_ID)),
N = sum(is.na(VALUE))) %>%
data.frame() %>%
reshape2::melt(id.vars = c('YEAR','SECTOR','PRODUCT','METRIC', 'VARIANCE', 'q25','q75','N', 'N_total')) %>%
mutate(STATISTIC = as.character(variable),
VALUE = value,
rm = case_when(METRIC %in% c('Purchase price (per lb)','Production price (per lb)','Markup','Recovery rate',
'Percent by value','Percent by weight') & STATISTIC == 'Total' ~ 1,
T ~ 0)) %>%
filter(rm != 1) %>%
select(-variable,-value, -rm)
# Total for rates
rates_tot <- data_rates_full_treated %>%
mutate(PRODUCT = case_when(METRIC %in% c('Purchase value','Purchase (or catch) weight') ~ 'All products',
T ~ PRODUCT)) %>%
reshape2::dcast(COMPANY + YEAR + SECTOR + PRODUCT ~ METRIC, value.var = 'VALUE', fun.aggregate = sum) %>%
group_by(YEAR, SECTOR, PRODUCT) %>%
summarize(`Purchase price (per lb)` =  sumNA(`Purchase value`, na.rm = T)/sumNA(`Purchase (or catch) weight`, na.rm = T),
`Production price (per lb)` = sumNA(`Production value`, na.rm = T)/sumNA(`Production weight`, na.rm = T),
Markup = sumNA(`Production value`, na.rm = T)/sumNA(`Purchase value`, na.rm = T),
`Recovery rate` = sumNA(`Production weight`, na.rm = T)/sumNA(`Purchase (or catch) weight`, na.rm = T)) %>%
reshape2::melt(id.vars = c('YEAR','SECTOR','PRODUCT')) %>%
mutate(rm = case_when((SECTOR == 'Catcher-Processor' & variable %in% c('Purchase price (per lb)', 'Markup'))
| (PRODUCT != 'All products' & variable %in% c('Purchase price (per lb)', 'Markup', 'Recovery rate')) ~ 1,
T ~ 0),
METRIC = variable,
VALUE = value) %>%
filter(rm != 1) %>%
select(-rm, -variable, - value)
perc_tot <- filter(data_rates_full_treated, PRODUCT == 'All products') %>%
reshape2::dcast(YEAR + SECTOR + COMPANY + VESSEL_ID ~ METRIC, value.var = 'VALUE') %>%
rename(`Total weight` = `Production weight`,
`Total value` = `Production value`) %>%
select(YEAR, SECTOR, COMPANY, VESSEL_ID, `Total value`,`Total weight`) %>%
merge(data_rates_full_treated %>%
filter(PRODUCT != 'All products' & !is.na(PRODUCT)) %>%
reshape2::dcast(YEAR + SECTOR + COMPANY + VESSEL_ID + PRODUCT ~ METRIC, value.var = 'VALUE') %>%
select(YEAR, SECTOR, COMPANY, VESSEL_ID, PRODUCT, `Production value`,`Production weight`)) %>%
group_by(YEAR, SECTOR, PRODUCT) %>%
summarize(`Percent by value` = (sumNA(`Production value`, na.rm = T)/sumNA(`Total value`, na.rm = T))*100,
`Percent by weight` = (sumNA(`Production weight`, na.rm = T)/sumNA(`Total weight`, na.rm = T))*100) %>%
reshape2::melt(id.vars = c('YEAR','SECTOR','PRODUCT')) %>%
rename(METRIC = variable,
VALUE = value)
rates_tot_full <- rbind(rates_tot, perc_tot) %>%
mutate(STATISTIC = 'Total',
VARIANCE = NA_real_,
q25 = NA_real_,
q75 = NA_real_) %>%
merge(data_all_smry %>%
select(-VARIANCE, -q25, -q75, -STATISTIC, -VALUE) %>%
distinct())
# Final summarized dataset####
data_final <- rbind(data_all_smry, rates_tot_full) %>%
mutate(
Metric = as.character(case_when(!is.na(PRODUCT) & PRODUCT != 'All products' ~ paste0(PRODUCT, " (", METRIC, ")"),
T ~ METRIC)),
Year = YEAR,
Sector = as.character(SECTOR),
Statistic = as.character(STATISTIC),
Value = VALUE,
Variance = VARIANCE) %>%
select(-c(PRODUCT, YEAR, SECTOR, METRIC, STATISTIC, VALUE, VARIANCE)) %>%
as.data.frame()
##-----------------------------##
# Formatting of final dataset#####
##-----------------------------##
# All combinations
all_combos <- data_final %>%
select(Year, Sector, Statistic, Metric, N_total) %>%
reshape2::dcast(Year + Sector + Statistic ~ Metric, value.var = 'N_total', fill = 0) %>%
reshape2::melt(c('Year', 'Sector','Statistic')) %>%
mutate(Metric = variable,
N_total = value) %>%
select(-value, -variable)
# Sector confidentiality (if cp, ms or shoreside are suppressed then don't show all)
conf_proctype <- filter(data_final, Sector != 'All') %>%
select(Year, Sector, Metric, Statistic, Value) %>%
group_by(Year, Metric, Statistic) %>%
summarize(conf = sum(is.na(Value))) %>%
full_join(data_final) %>%
mutate(Value = case_when(conf == 1 & Sector == 'All' ~ NA_real_,
T ~ Value),
Variance = case_when(conf == 1 & Sector == 'All' ~ NA_real_,
T ~ Variance),
q25 = case_when(conf == 1 & Sector == 'All' ~ NA_real_,
T ~ q25),
q75 = case_when(conf == 1 & Sector == 'All' ~ NA_real_,
T ~ q75))
# Adding whiting/non-whiting confidentiality checks
data_final_0notincluded <- right_join(data_final, conf_proctype)
# Add in all combos so that when a field doesn't exist it is populated with zero
data_final_allcombosnew <- full_join(data_final_0notincluded, all_combos) %>%
# q25, q75, value, variance, N will be NA for the N = 0 added from all_combos. Add in here
# N is NA when value is suppressed.
mutate(Value = case_when(N_total == 0 ~ 0,
T ~ Value),
Variance = case_when(N_total == 0 ~ 0,
T ~ Variance),
q25 = case_when(N_total == 0 ~ 0,
T ~ q25),
q75 = case_when(N_total == 0 ~ 0,
T ~ q75),
N = case_when(N_total == 0 ~ '0',
is.na(Value) ~ 'NA',
T ~ as.character(N_total))) %>%
select(-conf, -N_total)
# Final formatting
data_final_format <- data_final_allcombosnew %>%
rbind(tac_final, unused_tac) %>%
mutate(Value = case_when(Metric %in% c('Purchase value','Purchase price (per lb)','Markup')
& Sector == 'Catcher-Processor' ~ NA_real_,
T ~ Value),
Order = case_when(grepl('Surimi', Metric) ~ 1,
grepl('Fishmeal', Metric) ~ 2,
grepl('Fillet', Metric) ~ 3,
grepl('Headed-and-gutted', Metric) ~ 4,
grepl('Frozen whole/Round', Metric) ~ 5,
grepl('Minced', Metric) ~ 6,
grepl('Fish oil', Metric) ~ 7,
grepl('Unprocessed', Metric) ~ 8,
grepl('Other', Metric) ~ 9),
tab = case_when(grepl('Percent by value', Metric) ~ 'Not in use',
grepl('Percent by weight', Metric) ~ 'Not in use',
grepl('Roe', Metric) ~ 'Not in use',
grepl('Surimi', Metric) ~ 'Product',
grepl('Fishmeal', Metric) ~ 'Product',
grepl('Fillet', Metric) ~ 'Product',
grepl('Headed-and-gutted', Metric) ~ 'Product',
grepl('Frozen whole/Round', Metric) ~ 'Product',
grepl('Minced', Metric) ~ 'Product',
grepl('Fish oil', Metric) ~ 'Product',
grepl('Unprocessed', Metric) ~ 'Product',
grepl('Other', Metric) ~ 'Product',
grepl('Commercial catch', Metric) ~ 'TACU',
grepl('Unutilized allocation, post-reapportionment', Metric) ~ 'TACU',
grepl('Percent Commercial catch', Metric) ~ 'TACU',
grepl('Percent Unutilized allocation, post-reapportionment', Metric) ~ 'TACU',
grepl('Initial allocation', Metric) ~ 'TACU',
grepl('Final allocation', Metric) ~ 'TACU',
T ~ 'Summary')) %>%
group_by(Metric, Statistic) %>%
mutate(
unit = case_when(max(Value, na.rm = T) < 1e3 ~ '',
max(Value, na.rm = T) < 1e6 ~ 'thousands',
max(Value, na.rm = T) < 1e9 ~ 'millions',
max(Value, na.rm = T) < 1e12 ~ 'billions',
T ~ 'help'),
ylab = case_when(Metric %in% c('Purchase value','Purchase price (per lb)','Production value',
'Production price (per lb)', 'Markup') | grepl('Production value', Metric) |
grepl('Production price', Metric) ~
paste0(Metric, ": ", Statistic, " (", unit, " ", currentyear, " $)"),
Metric %in% c('Purchase (or catch) weight','Production weight') | grepl('Production weight', Metric) ~
paste0(Metric, ": ", Statistic, " (", unit, " lbs)"),
Metric == 'Recovery rate' | grepl('Percent', Metric) ~ Metric,
Metric == 'Total allowable catch, non-tribal' ~ paste0(Metric, ": Total (", unit, ")"),
T ~ paste0(Metric, " (", unit, ")")),
Statistic = case_when(Metric == 'Percent Commercial catch' ~ 'Utilization by percent',
Metric == 'Percent Unutilized allocation, post-reapportionment' ~ 'Utilization by percent',
(Metric == 'Commercial catch' & Statistic == 'Total') ~ 'Utilization by weight',
(Metric == 'Unutilized allocation, post-reapportionment' & Statistic == 'Total') ~ 'Utilization by weight',
(Metric == 'Initial allocation' & Statistic == 'Total') ~ 'Utilization by weight',
(Metric == 'Final allocation' & Statistic == 'Total') ~ 'Utilization by weight',
T~ Statistic),
Metric = case_when(Metric == 'Percent Commercial catch' ~ 'Commercial catch',
Metric == 'Percent Unutilized allocation, post-reapportionment' ~ 'Unutilized allocation, post-reapportionment',
T ~ Metric)) %>%
mutate(ylab = case_when(Statistic == 'Utilization by percent' ~ 'Attainment (%)',
Statistic == 'Utilization by weight' ~ 'Catch weight in metric tons (millions)',
T ~ ylab)) %>%
distinct() %>%
data.frame()
# if FR and vessels are on different years then need to make sure we don't show "all" for the most current year.
# Add impacts by rbind
final <- data_final_format %>%
mutate(rm = case_when(Sector == 'All' & Year > frcurrentyear & Metric != 'Total allowable catch, non-tribal' ~ 1,
T ~ 0)) %>%
filter(rm != 1) %>%
select(-rm) %>%
rbind(mscv_impacts) %>%
rbind(cp_impacts)
##-----------------------------##
# -------Compare function-----####
##-----------------------------##
mini_whiting <- readRDS("mini_whiting.RDS")
old <- mini_whiting %>%
select(-tab, -ylab) %>%
ungroup() %>%
mutate(Metric = case_when(Metric == 'Purchase cost' ~ 'Purchase value',
T ~ Metric),
N = as.numeric(N),
Year = as.numeric(Year))
new <- final %>%
select(-tab, -ylab) %>%
mutate(N = as.numeric(N),
Year = as.numeric(Year))
##
gg <- comparefun(old, new, c('N','Value','Variance', 'q25','q75'), 'wide')
# Check missing combos
gg2 <- filter(gg, combomiss == 'Missing combo', Metric != 'Recovery rate')
gg3 <- filter(gg, combomiss == 'Fine')
# units switched to millions because in 2018 shoreside had value of over million
gg2_ck <- filter(final, Metric == 'Other (Production value)' & Statistic == 'Mean')
thres <- filter(gg, Value_percDiff > 0.05)
##-----------------------------##
##Remove metrics that we dont want to include#####
##-----------------------------##
final <- filter(final, !Metric %in% c('Recovery rate'))
##------------------------------##
##Reorder by column name############
##------------------------------##
final <- final[c('Year','Sector','Metric','Statistic','N','Value','Variance','q25','q75','Order','tab','unit','ylab')]
##-----------------------------##
#----------Save data----------####
##---------------------------##
mini_whiting <- final
rownames(mini_whiting) <- NULL
saveRDS(mini_whiting, file = "mini_whiting.RDS")
shiny::runApp()
View(mini_whiting)
.libPaths("/usr/lib64/R/shiny_library/fisheye")
#detach(unload = TRUE)
library(shiny)
library(shinyjs)
library(shinyBS)
library(ggplot2)
library(grid)
library(dplyr)
library(scales)
library(DT)
mini_whiting <- readRDS("mini_whiting.RDS")
# Data formatting for plot ####
data <- mini_whiting %>%
mutate(Variance = case_when(
unit == '' ~ Variance,
unit == 'thousands' ~ Variance/1e3,
unit == 'millions' ~ Variance/1e6,
unit == 'billions' ~ Variance/1e9,
T ~ -999),
q25 = case_when(
unit == '' ~ q25,
unit == 'thousands' ~ q25/1e3,
unit == 'millions' ~  q25/1e6,
unit == 'billions' ~  q25/1e9,
T ~ -999),
q75 = case_when(
unit == '' ~ q75,
unit == 'thousands' ~ q75/1e3,
unit == 'millions' ~  q75/1e6,
unit == 'billions' ~  q75/1e9,
T ~ -999),
Value = case_when(
unit == '' ~ Value,
unit == 'thousands' ~ Value/1e3,
unit == 'millions' ~ Value/1e6,
unit == 'billions' ~ Value/1e9,
T ~ -999),
upper = case_when(Statistic == 'Mean' ~ Value + Variance,
Statistic == 'Median' ~ q75,
Statistic == 'Total' ~ Value),
lower = case_when(Statistic == 'Mean' ~ Value - Variance,
Statistic == 'Median' ~ q25,
Statistic == 'Total' ~ Value)) %>%
data.frame()
# Data formatting for table#####
data_table <- mini_whiting %>%
mutate(Variance = round(Variance, 2),
q25 = round(q25,2),
q75 = round(q75,2),
Value = round(Value, 2)) %>%
data.frame()
# Filter by tab and metric for easy use in sidebar setup#####
prodTab <- filter(data, tab == 'Product')
prodTabval <- filter(prodTab, grepl('Production value', Metric))
prodTabwt <- filter(prodTab, grepl('Production weight', Metric))
prodTabprice <- filter(prodTab, grepl('Production price', Metric))
sumTab <- filter(data, tab == 'Summary')
sumTab$Metric <- sort(sumTab$Metric, decreasing = T)
tacTab <- filter(data, tab == 'TACU' & Statistic %in% c('Utilization by weight', 'Utilization by percent'))
tacTabval <- filter(tacTab, !grepl('percent', Metric))
tacTabperc <- filter(tacTab, grepl('percent', Metric))
tacTab
runApp()
unique(tacTab$Statistic)
runApp()
runApp()
getwd()
shiny::runApp()
mini_whiting <- readRDS("mini_whiting.RDS")
View(mini_whiting)
runApp()
View(mini_whiting)
shiny::runApp()
runApp()
library(reshape2)
library(tidyr)
library(dplyr)
library(edcdataprep)
library(data.table)
source("C:/Program Files/R/connectioninfoROracle.r")
dontprint <- dbSendQuery(framdw, "alter session set current_schema = FRAM_ANALYSIS")
currentyear <- 2021
dbids_WC <- dbGetQuery(framdw, paste("select distinct edcsurvey_dbid
from edc_ms_all_mv where (edcsurvey_dbid not in (1195, 1196, 3919)
and EDCWTMSWC > 0
and YEAR between 2009 and ", currentyear, ")"))
# I switched the code over to pulling from the database to get company info so we don't have to worry about maintaining it in 2 places
companydata <- dbGetQuery(framdw, "select distinct vessel_id, edcsurvey_dbid, year, company
from edc_ms_all_mv")
purchase_val <- dbGetQuery(framdw, paste("
select *
from edc_ms_all_mv
where edcsurvey_dbid in (", xfn(dbids_WC), ")
and fullcode like 'EXCOST%'
and year between 2009 and ", currentyear, ""))
View(purchase_val)
View(purchase_lbs)
###edc_ms_purchase####
purchase_lbs <- dbGetQuery(framdw, paste("
select edcsurvey_dbid, vessel_id, company, year, ms_disag * 2204.62 weight, species, type
from edc_ms_all_mv
where edcsurvey_dbid in (", xfn(dbids_WC), ")
and fullcode like 'EXWT%'
and year between 2009 and ", currentyear, "
and ms_disag > 0"))
View(purchase_lbs)
purchase_lbs <- dbGetQuery(framdw, paste("
select *
from edc_ms_all_mv
where edcsurvey_dbid in (", xfn(dbids_WC), ")
and fullcode like 'EXWT%'
and year between 2009 and ", currentyear, "
and ms_disag > 0"))
View(purchase_lbs)
View(purchase_lbs)
purchase_val <- dbGetQuery(framdw, paste("
select edcsurvey_dbid, vessel_id, year, ms_disag cost, species, 'Paid' TYPE
from edc_ms_all_mv
where edcsurvey_dbid in (", xfn(dbids_WC), ")
and fullcode like 'EXCOST%'
and year between 2009 and ", currentyear, "
# and ms_disag > 0"))
purchase_val <- dbGetQuery(framdw, paste("
select edcsurvey_dbid, vessel_id, year, ms_disag cost, species, 'Paid' TYPE
from edc_ms_all_mv
where edcsurvey_dbid in (", xfn(dbids_WC), ")
and fullcode like 'EXCOST%'
and year between 2009 and ", currentyear, "
and ms_disag > 0"))
View(purchase_val)
edc_ms_purchase <- merge(purchase_lbs, purchase_val, by = c('EDCSURVEY_DBID', 'VESSEL_ID','YEAR','SPECIES','TYPE'), all = T) %>%
mutate(COST = case_when(TYPE == 'Received' ~ 0,
T ~ COST))
edc_ms_purchase
View(edc_ms_purchase)
purchase_lbs <- dbGetQuery(framdw, paste("
select edcsurvey_dbid, vessel_id, company, year, ms_disag * 2204.62 weight, species, type
from edc_ms_all_mv
where edcsurvey_dbid in (", xfn(dbids_WC), ")
and fullcode like 'EXWT%'
and year between 2009 and ", currentyear, "
and ms_disag > 0"))
purchase_val <- dbGetQuery(framdw, paste("
select edcsurvey_dbid, vessel_id, year, ms_disag cost, species, 'Paid' TYPE
from edc_ms_all_mv
where edcsurvey_dbid in (", xfn(dbids_WC), ")
and fullcode like 'EXCOST%'
and year between 2009 and ", currentyear, "
and ms_disag > 0"))
edc_ms_purchase <- merge(purchase_lbs, purchase_val, by = c('EDCSURVEY_DBID', 'VESSEL_ID','YEAR','SPECIES','TYPE'), all = T) %>%
mutate(COST = case_when(TYPE == 'Received' ~ 0,
T ~ COST))
View(edc_ms_purchase)
edc_ms_purchase <- na.omit(edc_ms_purchase)
View(edc_ms_purchase)
purchase_lbs <- dbGetQuery(framdw, paste("
select *
from edc_ms_all_mv
where edcsurvey_dbid in (", xfn(dbids_WC), ")
and fullcode like 'EXWT%'
and year between 2009 and ", currentyear, "
and ms_disag > 0"))
view(purchase_lbs)
View(purchase_lbs)
purchase_lbs <- dbGetQuery(framdw, paste("
select edcsurvey_dbid, vessel_id, company, year, ms_disag * 2204.62 weight, species, type
from edc_ms_all_mv
where edcsurvey_dbid in (", xfn(dbids_WC), ")
and fullcode like 'EXWT%'
and year between 2009 and ", currentyear, "
and ms_disag > 0"))
purchase_val <- dbGetQuery(framdw, paste("
select edcsurvey_dbid, vessel_id, year, ms_disag cost, species, 'Paid' TYPE
from edc_ms_all_mv
where edcsurvey_dbid in (", xfn(dbids_WC), ")
and fullcode like 'EXCOST%'
and year between 2009 and ", currentyear, "
and ms_disag > 0"))
edc_ms_purchase <- merge(purchase_lbs, purchase_val, by = c('EDCSURVEY_DBID', 'VESSEL_ID','YEAR','SPECIES','TYPE'), all = T) %>%
mutate(COST = case_when(TYPE == 'Received' ~ 0,
T ~ COST))
edc_ms_purchase <- na.omit(edc_ms_purchase)
write.csv(edc_ms_purchase, file = paste0("R:/Confidential/EDC/", currentyear, "DataCollection/ReportComponents/MS/edc_ms_purchase.csv"), row.names = F)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
gdpMain <- load("gdp_defl.RData")
runApp()
View(gdp_defl)
load("~/REPOS/fisheyeall/whiting/gdp_defl.RData")
gdp <- gdp_defl
gdp$YEAR <- as.character(gdp$YEAR)
gdp$DEFL <- gdp$DEFL/gdp$DEFL[gdp$YEAR == input$deflYearselect]
gdp_defl <- load("gdp_defl.RData")
gdp <- gdp_defl
gdp$YEAR <- as.character(gdp$YEAR)
load("gdp_defl.RData")
gdp <- gdp_defl
gdp$YEAR <- as.character(gdp$YEAR)
shiny::runApp()
gdp <- gdp_defl
gdp$YEAR <- as.character(gdp$YEAR)
runApp()
mini_whiting
head(mini_whiting)
runApp()
runApp()
head(gdp_defl)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(mini_whiting)
mini_whiting <- readRDS("~/REPOS/fisheyeall/whiting/mini_whiting.RDS")
View(mini_whiting)
mini_whiting <- readRDS("mini_whiting.RDS")
View(mini_whiting)
View(mini_whiting)
runApp()
